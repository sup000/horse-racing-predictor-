import pandas as pd     
import numpy as np
from sklearn.model_selection import train_test_split  
from sklearn.ensemble import RandomForestClassifier 
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, roc_auc_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder 
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import warnings
from typing import List, Dict, Tuple, Any


warnings.filterwarnings('ignore') 
pd.set_option('display.max_columns', None) 

SEED = 42
np.random.seed(SEED)

NUM_RACES = 500
HORSES_PER_RACE = 10
UNIQUE_HORSES = 2000
UNIQUE_JOCKEYS = 200
UNIQUE_TRAINERS = 150


def simulate_entity_attributes(
    num_horses: int, num_jockeys: int, num_trainers: int
) -> Tuple[Dict[str, float], Dict[str, float], Dict[str, float]]:
    
    horse_base_speeds = {f'H_{h}': np.random.uniform(80, 120) for h in range(num_horses)}
    jockey_skills = {f'J_{j}': np.random.uniform(0.05, 0.25) for j in range(num_jockeys)} # Base win percentage
    trainer_skills = {f'T_{t}': np.random.uniform(0.08, 0.30) for t in range(num_trainers)} # Base win percentage
    return horse_base_speeds, jockey_skills, trainer_skills

def simulate_race_data(
    num_races: int,
    horses_per_race: int,
    horse_base_speeds: Dict[str, float],
    jockey_skills: Dict[str, float],
    trainer_skills: Dict[str, float]
) -> pd.DataFrame:


    all_race_entries = []
    print(f"Simulating {num_races} races...")

    for i in range(num_races):
        race_id = f'RACE_{i:04d}'
        race_distance = np.random.choice([1000, 1200, 1400, 1600, 1800, 2000, 2400]) 
        race_class = np.random.choice(['Maiden', 'Claiming', 'Allowance', 'Grade 3', 'Grade 2', 'Grade 1'])
        going = np.random.choice(['Fast', 'Good', 'Soft', 'Heavy']) 

        potential_winners_in_race = []
        for _ in range(horses_per_race):
            horse_id = f'H_{np.random.randint(0, len(horse_base_speeds))}'
            jockey_id = f'J_{np.random.randint(0, len(jockey_skills))}'
            trainer_id = f'T_{np.random.randint(0, len(trainer_skills))}'

            horse_age = np.random.randint(3, 8) 
            weight_carried = np.random.uniform(50, 65) 
            days_since_last_run = np.random.randint(10, 120) 
            
            
            prev_speed_figure = horse_base_speeds[horse_id] + np.random.uniform(-5, 5)

            
            jockey_win_perc = np.clip(jockey_skills[jockey_id] + np.random.uniform(-0.02, 0.02), 0, 1)
            trainer_win_perc = np.clip(trainer_skills[trainer_id] + np.random.uniform(-0.03, 0.03), 0, 1)


            # - np.random.normal(0, 5): Random race-day noise.
            true_performance_score = (
                prev_speed_figure * 0.4  
                + (1 - (weight_carried / 65)) * 15  
                + (1 - (days_since_last_run / 120)) * 10 
                + (jockey_win_perc * 100) * 0.25 # Weight for jockey skill
                + (trainer_win_perc * 100) * 0.25 # Weight for trainer skill
                + np.random.normal(0, 7) # Increased random noise for more variability
            )
            
            potential_winners_in_race.append({
                'horse_id': horse_id, 'performance_score': true_performance_score,
                'jockey_id': jockey_id, 'trainer_id': trainer_id,
                'horse_age': horse_age, 'weight_carried': weight_carried,
                'days_since_last_run': days_since_last_run,
                'prev_speed_figure': prev_speed_figure,
                'jockey_win_perc': jockey_win_perc,
                'trainer_win_perc': trainer_win_perc,
                'race_id': race_id, 'race_distance': race_distance,
                'race_class': race_class, 'going': going
            })
